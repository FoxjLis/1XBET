from aiogram import types
from Funk.game_func import get_last_5_matches
from Funk.game_func import check_winner
from random import randint
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, Message
from Funk.statistics_func import match_history_between_teams, player_stat, team_members, team_stat
from Funk import News_func
from handlers import text, kb
import asyncio
users = dict()
users_input = dict()
users_news = dict()
team_fight_history = dict()
users_game = dict()


async def print_news(sport: str, callback: CallbackQuery) -> None:
    post_text = await News_func.send_last_news(sport)
    await asyncio.sleep(0.4)
    await callback.message.edit_text(text=post_text[-1], reply_markup=kb.back)


async def sport_choice(callback: CallbackQuery, category: str) -> None:
    user_id = callback.from_user.id
    users[user_id] = [category]
    await callback.message.edit_text(text='üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞', reply_markup=kb.kinds_sports)


async def run_selected_function(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    option = users[user_id][0]
    sport = users[user_id][-1]
    if option == 'news':
        await print_news(sport, callback)

    elif option == 'search_directory':
        await select_static(callback, sport)

    elif option == 'prediction':
        await do_prediction(callback, sport)

    elif option == 'alerts':
        if user_id in users_news:
            pass
        else:
            users_news[user_id] = [False, False, False]  # 0-—Ñ—É—Ç–±–æ–ª #1-–•–æ–∫–∫–µ–π #2-–í–æ–ª–µ–π–±–æ–ª
        await connect_alerts(callback, sport, user_id)


async def select_static(callback: CallbackQuery, sport: str) -> None:
    if sport == 'hockey':
        await callback.message.edit_text(text=text.select, reply_markup=kb.type_statik)
    else:
        await callback.message.edit_text(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ö°‚ö°‚ö°\n–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –•–æ–∫–∫–µ—é!',
            reply_markup=kb.back)


async def do_prediction(callback: CallbackQuery, sport: str) -> None:
    if sport == 'hockey':
        await callback.message.edit_text(
            text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!</b>\nüîπ<b>–ò–≥—Ä–∞</b> - '
                 '—Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –º–∞—à–∏–Ω–æ–π –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π!\n'
                 'üîπ<b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</b> - —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–π–≥—Ä–∞—é—Ç –ø–æ –º–Ω–µ–Ω–∏—é –±–æ—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö! ',
            reply_markup=kb.choose)
    else:
        await callback.message.edit_text(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ö°‚ö°‚ö°\n–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –•–æ–∫–∫–µ—é!',
            reply_markup=kb.back)


async def connect_alerts(callback: CallbackQuery, sport: str, user_id: int) -> None:
    if sport == 'football':
        users_news[user_id][0] = not users_news[user_id][0]
    elif sport == 'hockey':
        users_news[user_id][1] = not users_news[user_id][1]
    elif sport == 'volleyball':
        users_news[user_id][2] = not users_news[user_id][2]
    if sport == 'football':
        if users_news[user_id][0]:
            await callback.answer('üîîüîîüîî\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ñ—É—Ç–±–æ–ª—É –≤–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
        else:
            await callback.answer('üîïüîïüîï\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ñ—É—Ç–±–æ–ª—É –≤—ã–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
    elif sport == 'hockey':
        if users_news[user_id][1]:
            await callback.answer('üîîüîîüîî\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ö–æ–∫–∫–µ—é –≤–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
        else:
            await callback.answer('üîïüîïüîï\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ö–æ–∫–∫–µ—é –≤—ã–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
    elif sport == 'volleyball':
        if users_news[user_id][2]:
            await callback.answer('üîîüîîüîî\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É –≤–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
        else:
            await callback.answer('üîïüîïüîï\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É –≤—ã–∫–ª—é—á–µ–Ω—ã!', show_alert=True)
    await News_func.do_parser_news(callback,users_news)


async def add_a_sport(callback: CallbackQuery) -> CallbackQuery:
    sport = callback.data
    user_id = callback.from_user.id
    users[user_id].append(sport)
    return callback


async def print_statistics(message: Message) -> None:
    user_id = message.from_user.id
    if users[user_id][-1] == 'player':
        await print_stat_player(message, user_id)

    if users[user_id][-1] == 'team':
        await print_stat_team(message, user_id)

    if users[user_id][-1] == 'history':
        await print_stat_history(message, user_id)


async def print_stat_player(message: Message, user_id: int) -> None:
    if player_stat(users_input[user_id][0]) != '':
        await message.answer(text=player_stat(users_input[user_id][0]), reply_markup=kb.back)
    else:
        await message.answer(
            '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n'
            '–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b> —Å <b>–∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã</b>'
            '\n–ü—Ä–∏–º–µ—Ä: "–ú–∏—à—É—Ä–æ–≤ –ê–Ω–¥—Ä–µ–π"',
            reply_markup=kb.back)


async def print_stat_history(message: Message, user_id: int) -> None:
    team = users_input[user_id][0]
    team_name = team[0:team.rfind(' ')]
    town_name = team[team.rfind(' ') + 1:]
    if not team_fight_history[user_id]:
        team_fight_history[user_id].append(team)
        if team_stat(team_name, town_name) != "":
            await message.answer(
                f'–ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - {team} ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
                f' –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ê–∫ –ë–∞—Ä—Å –ö–∞–∑–∞–Ω—å"',
                reply_markup=kb.back)
        else:
            team_fight_history[user_id] = []
            await message.answer(
                f'–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå'
                f' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ <b><i>–ø–µ—Ä–≤–æ–π</i></b>'
                f' –∫–æ–º–∞–Ω–¥—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –≥–æ—Ä–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–¶–°–ö–ê –ú–æ—Å–∫–≤–∞"',
                reply_markup=kb.back)

    else:
        if team_stat(team_name, town_name) != "":
            team1 = team_fight_history[user_id][0]
            team2 = team_fight_history[user_id][1]
            team_fight_history[user_id].append(team)
            text_team_stat = match_history_between_teams(team1, team2)
            if text_team_stat == '' or team1 == team2:
                text_find = '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã'
            else:
                text_find = '–Ω–∞–π–¥–µ–Ω–∞ ‚úÖ'
            await message.answer(
                text=f'–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–∞–Ω–¥ {team1}'
                     f' –∏ {team2} {text_find}\n\n{text_team_stat}',
                reply_markup=kb.back)
            team_fight_history[user_id] = []
        else:
            await message.answer(
                f'–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå'
                f' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ <b><i>–≤—Ç–æ—Ä–æ–π</i></b>'
                f' –∫–æ–º–∞–Ω–¥—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –≥–æ—Ä–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–¶–°–ö–ê –ú–æ—Å–∫–≤–∞"',
                reply_markup=kb.back)


async def print_stat_team(message:Message, user_id:int) -> None:
    text_user = users_input[user_id][0]
    team_name = text_user[0:text_user.rfind(' ')]
    town_name = text_user[text_user.rfind(' ') + 1:]
    if team_stat(team_name, town_name) != '':
        stat = team_stat(team_name, town_name)
        members = team_members(team_name)
        await message.answer(text=f'{members}\n\n{stat}', reply_markup=kb.back)
    else:
        await message.answer(
            '–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! '
            '–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –≥–æ—Ä–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç, '
            '–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¶–°–ö–ê –ú–æ—Å–∫–≤–∞"',
            reply_markup=kb.back)


async def start_game(callback: CallbackQuery) -> None:
    users_game[callback.from_user.id] = [0, 0, 0]  # 0-–≤–æ–ø—Ä–æ—Å #1-–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ #2-–æ—á–∫–∏ –ë–æ—Ç–∞
    matches_info = get_last_5_matches()
    question_number = users_game[callback.from_user.id][0]
    if question_number == 0:
        team1 = matches_info[question_number][0]
        team2 = matches_info[question_number][1]
        keyboard = [
            [KeyboardButton(text=team1)],
            [KeyboardButton(text=team2)]]
        keyboard = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        await callback.message.edit_text(
            text='–ì–æ—Ç–æ–≤—ã –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º?\n'
                 '–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –Ω–∞—á–Ω—ë–ºüöÄüöÄüöÄ')
        await callback.message.answer(
            text=f'–ü–µ—Ä–≤—ã–µ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ —É –Ω–∞—Å <b>{team1}</b>'
                 f' –∏ <b>{team2}</b>\n–ö—Ç–æ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –ø–æ–±–µ–¥–∏—Ç?',
            reply_markup=keyboard)


async def play_game(message: Message) -> None:
    matches_info = get_last_5_matches()
    team1 = matches_info[users_game[message.from_user.id][0]][0]
    team2 = matches_info[users_game[message.from_user.id][0]][1]
    team_win = matches_info[users_game[message.from_user.id][0]][2]
    bot_points = users_game[message.from_user.id][2]
    user_point = users_game[message.from_user.id][1]

    async def next_team(text_user_guessed: str) -> None:
        next_team1 = matches_info[users_game[message.from_user.id][0]][0]
        next_team2 = matches_info[users_game[message.from_user.id][0]][1]
        keyboard = [
            [KeyboardButton(text=next_team1)],
            [KeyboardButton(text=next_team2)]]
        keyboard1 = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        prefix_random = randint(0, 3)
        await message.answer(text=f'{text_user_guessed}\n{variants_of_start[prefix_random]}'
                                  f' –º–µ–∂–¥—É <b>{next_team1}</b> –∏ <b>{next_team2}</b>\n–ö—Ç–æ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –ø–æ–±–µ–¥–∏—Ç?',
                             reply_markup=keyboard1)

    variants_of_start = ['–ò —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á', '–ò —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –º–∞—Ç—á', '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ç—á—É',
                         '–ê —Å–µ–π—á–∞—Å —É –Ω–∞—Å –º–∞—Ç—á']

    async def print_win() -> None:
        final_text = ''
        text_results = (f'<b>–ò—Ç–∞–∫, –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏</b>‚ö°‚ö°‚ö°\n–í—ã —É–≥–∞–¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π:'
                        f' <b>{user_point}</b>\n–ë–æ—Ç —É–≥–∞–¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π: <b>{bot_points}</b>')
        if bot_points > user_point:
            final_text += ' \n–í–∏–¥–∏–º–æ –Ω–∞—à –±–æ—Ç –∏ –≤–ø—Ä–∞–≤–¥—É –Ω–µ–ø–ª–æ—Öü§ñ'
        elif bot_points == user_point:
            final_text += ' \n–í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ —Ä–∞–≤–Ω—ã—Ö —Å –º–∞—à–∏–Ω–æ–π, –ø–æ—Ö–≤–∞–ª—å–Ω–æ\nüèÖüèÖüèÖ'
        else:
            final_text += ' \n–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, —É –≤–∞—Å —Å–ª—É—á–∞–µ–º –Ω–µ—Ç —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π?ü§Øü§Øü§Ø'
        await message.answer(text=text_results, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(text=final_text, reply_markup=kb.go_menu)

    player_input = message.text
    if users_game[message.from_user.id][0] <= 5:
        if player_input == team_win:
            text_guessed = '–í—ã —É–≥–∞–¥–∞–ª–∏‚úÖ'
            user_point += 1
        else:
            text_guessed = '–£–ø—Å, –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±–ª–∏—Å—å‚ùå'
        if check_winner(team1, team2) == team_win:
            bot_points += 1
        users_game[message.from_user.id][0] += 1
        if users_game[message.from_user.id][0] < 5:
            await next_team(text_guessed)
        else:
            await print_win()
    users_game[message.from_user.id][2] = bot_points
    users_game[message.from_user.id][1] = user_point
